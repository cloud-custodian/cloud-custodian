#!/usr/bin/env python3
import os
import argparse
import json
import yaml
import tests.common
import c7n.credentials
import c7n.utils
import placebo
import shutil
import boto3

class TestPolicy(tests.zpill.PillTest):
    def __init__(self, policy, cache, assume_role=None):
        self.policy = policy
        self.assume_role = assume_role
        self.account_id = None
        self.cleanup = []
        self.placebo_dir = cache
        self.test_dir = os.path.join(self.placebo_dir, self.policy['name'])
        if assume_role:
            self.account_id = self.assume_role.split(':')[4]

    def run(self, replay):
        if replay:
            session_factory = self.replay_flight_data(self.policy['name'])
            output_dir = None
        else:
            session_factory = self.record_flight_data(self.policy['name'], assume_role=self.assume_role)
            output_dir = self.placebo_dir

        policy = self.load_policy(
            self.policy,
            config={'dryrun': True, 'output_dir': output_dir, 'account_id': self.account_id},
            session_factory=session_factory,
            validate=True,
            output_dir=output_dir,
        )
        resources = policy.run()
        resources = c7n.utils.loads(c7n.utils.dumps(resources))

        if replay:
            with open(os.path.join(self.test_dir, 'resources.json'), 'r') as fh:
                old_resources = c7n.utils.loads(fh.read())
                print(resources == old_resources)

        for func, args, kw in self.cleanup:
            func(*args, **kw)

    def addCleanup(self, func, *args, **kw):
        self.cleanup.append((func, args, kw))

def get_policy(policies, name):
    policies = policies.get('policies', [])
    for policy in policies:
        if policy.get('name') == name:
            return policy

    return None

def main():
    parser = argparse.ArgumentParser('Policy Tester')
    parser.add_argument('--assume', dest='assume_role', help='Role to assume')
    subparsers = parser.add_subparsers(dest='command', help='Execution mode')
    subparsers.required=True

    record_parser = subparsers.add_parser('record')
    record_parser.add_argument('--cache', type=str, default='cache', help='Cache dir to write to')
    record_parser.add_argument('policy', type=argparse.FileType('r'), help='Policy file to consume')
    record_parser.add_argument('name', type=str, help='Name of the policy')

    test_parser = subparsers.add_parser('replay')
    test_parser.add_argument('--cache', type=str, default='cache', help='Cache dir to consume')
    test_parser.add_argument('policy', type=argparse.FileType('r'), help='Policy file to consume')
    test_parser.add_argument('name', type=str, help='Name of the policy')

    args = parser.parse_args()

    policy = get_policy(yaml.safe_load(args.policy), args.name)
    if policy is None:
        print("Policy not found!")

    replay = args.command == 'replay'
    runner = TestPolicy(policy, args.cache, args.assume_role)
    runner.run(replay=replay)

if __name__ == '__main__':
    main()
