# Dockerfiles are generated from tools/dev/dockerpkg.py
FROM chainguard/wolfi-base:latest as build-env

ARG POETRY_VERSION="1.5.1"
ARG PYTHON_VERSION="3.12"

# pre-requisite distro deps, and build env setup
RUN adduser -D --gecos "" custodian
RUN apk add curl bash git wget python-${PYTHON_VERSION}

SHELL ["/bin/bash", "-c"]

RUN python -m venv /app
RUN /app/bin/pip install -U pip setuptools &&     /app/bin/pip install "poetry==${POETRY_VERSION}"
ARG PATH="/root/.local/bin:$PATH"

WORKDIR /src
# Add core & aws packages
ADD pyproject.toml poetry.lock README.md /src/
RUN . /app/bin/activate && pip install -qU pip wheel aws-xray-sdk jsonpatch

# Ignore root first pass so if source changes we don't have to invalidate
# dependency install
RUN . /app/bin/activate && poetry install --without dev --no-root

# Now install the root package, we used to do this after dependencies of other providers
# but since moving c7n to a main dependency in pyproject toml we have to do this one first.
ADD c7n /src/c7n/
RUN . /app/bin/activate && poetry install --only-root

ARG providers="gcp azure kube tencentcloud oci"
# Add provider packages
# We include `pyproject.toml` and `poetry.lock` first to allow
# cache of dependency installs.

ADD tools/c7n_gcp/pyproject.toml tools/c7n_gcp/poetry.lock /src/tools/c7n_gcp/
RUN if [[ " ${providers[*]} " =~ "gcp" ]]; then     . /app/bin/activate &&     cd tools/c7n_gcp &&     poetry install --without dev --no-root; fi


ADD tools/c7n_azure/pyproject.toml tools/c7n_azure/poetry.lock /src/tools/c7n_azure/
RUN if [[ " ${providers[*]} " =~ "azure" ]]; then     . /app/bin/activate &&     cd tools/c7n_azure &&     poetry install --without dev --no-root && wget wget https://raw.githubusercontent.com/clumio-code/azure-sdk-trim/main/azure_sdk_trim/azure_sdk_trim.py && python azure_sdk_trim.py; fi


ADD tools/c7n_kube/pyproject.toml tools/c7n_kube/poetry.lock /src/tools/c7n_kube/
RUN if [[ " ${providers[*]} " =~ "kube" ]]; then     . /app/bin/activate &&     cd tools/c7n_kube &&     poetry install --without dev --no-root; fi


ADD tools/c7n_tencentcloud/pyproject.toml tools/c7n_tencentcloud/poetry.lock /src/tools/c7n_tencentcloud/
RUN if [[ " ${providers[*]} " =~ "tencentcloud" ]]; then     . /app/bin/activate &&     cd tools/c7n_tencentcloud &&     poetry install --without dev --no-root; fi


ADD tools/c7n_oci/pyproject.toml tools/c7n_oci/poetry.lock /src/tools/c7n_oci/
RUN if [[ " ${providers[*]} " =~ "oci" ]]; then     . /app/bin/activate &&     cd tools/c7n_oci &&     poetry install --without dev --no-root; fi


# Now install the root of each provider

ADD tools/c7n_gcp /src/tools/c7n_gcp
RUN if [[ " ${providers[*]} " =~ "gcp" ]]; then     . /app/bin/activate &&     cd tools/c7n_gcp &&     poetry install --only-root; fi


ADD tools/c7n_azure /src/tools/c7n_azure
RUN if [[ " ${providers[*]} " =~ "azure" ]]; then     . /app/bin/activate &&     cd tools/c7n_azure &&     poetry install --only-root; fi


ADD tools/c7n_kube /src/tools/c7n_kube
RUN if [[ " ${providers[*]} " =~ "kube" ]]; then     . /app/bin/activate &&     cd tools/c7n_kube &&     poetry install --only-root; fi


ADD tools/c7n_tencentcloud /src/tools/c7n_tencentcloud
RUN if [[ " ${providers[*]} " =~ "tencentcloud" ]]; then     . /app/bin/activate &&     cd tools/c7n_tencentcloud &&     poetry install --only-root; fi


ADD tools/c7n_oci /src/tools/c7n_oci
RUN if [[ " ${providers[*]} " =~ "oci" ]]; then     . /app/bin/activate &&     cd tools/c7n_oci &&     poetry install --only-root; fi


RUN mkdir /output

FROM chainguard/wolfi-base:latest

LABEL name="cli" \
      repository="http://github.com/cloud-custodian/cloud-custodian"

ARG PYTHON_VERSION="3.12"

RUN apk add python-${PYTHON_VERSION}

# These should remain below any other commands because they will invalidate
# the layer cache
COPY --from=build-env /src /src
COPY --from=build-env /app /app
COPY --from=build-env /output /output


RUN adduser -D -h /home/custodian --gecos "" custodian
USER custodian
WORKDIR /home/custodian
ENV LC_ALL="C.UTF-8" LANG="C.UTF-8"
VOLUME ["/home/custodian"]
ENTRYPOINT ["/app/bin/custodian"]
CMD ["--help"]

LABEL "org.opencontainers.image.title"="cli"
LABEL "org.opencontainers.image.description"="Cloud Management Rules Engine"
LABEL "org.opencontainers.image.documentation"="https://cloudcustodian.io/docs"
