{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Path to a Well Managed Cloud \u00b6 Cloud Custodian enables you to manage your cloud resources by filtering, tagging, and then applying actions to them. The YAML DSL allows defininition of rules to enable well-managed cloud infrastructure that's both secure and cost optimized. Replace ad-hoc cloud-specific scripts with simpler syntax, and Cloud Custodian will apply those policies to your infrastructure: Join our Slack Custodian supports managing AWS, Azure, and GCP public cloud environments with Kubernetes, Tencent Cloud, and OpenStack support in beta. Real-time Compliance Custodian can actively enforce security policies by natively integrating with the cloud provider's control plane and remediating in real-time. Includes with unified metrics and reporting. Getting started Cost Management Setup off-hours to save money by turning off resources when they're not being used. Garbage collect unused resources by looking into utilization metrics. Easily tag and reap unused resources. Off Hours Shift Left Integrate Custodian with Terraform to ensure your infrastructure comes up compliant right from the start, all defined in git for true \"Governance as Code\" benefits. This feature is currently in Alpha. Shift Left Run Anywhere Custodian can be run locally, on an instance, or Serverless in AWS Lambda. License Open Source Cloud Custodian is open source and free for everyone to use and is a CNCF Incubating Project under the Apache 2.0 license . CNCF Simple DSL Use Custodian to build complex workflows or simple queries, millions of policies can be constructed using our easy to read DSL (Domain Specific Language). Examples","title":"Home"},{"location":"#the-path-to-a-well-managed-cloud","text":"Cloud Custodian enables you to manage your cloud resources by filtering, tagging, and then applying actions to them. The YAML DSL allows defininition of rules to enable well-managed cloud infrastructure that's both secure and cost optimized. Replace ad-hoc cloud-specific scripts with simpler syntax, and Cloud Custodian will apply those policies to your infrastructure: Join our Slack Custodian supports managing AWS, Azure, and GCP public cloud environments with Kubernetes, Tencent Cloud, and OpenStack support in beta. Real-time Compliance Custodian can actively enforce security policies by natively integrating with the cloud provider's control plane and remediating in real-time. Includes with unified metrics and reporting. Getting started Cost Management Setup off-hours to save money by turning off resources when they're not being used. Garbage collect unused resources by looking into utilization metrics. Easily tag and reap unused resources. Off Hours Shift Left Integrate Custodian with Terraform to ensure your infrastructure comes up compliant right from the start, all defined in git for true \"Governance as Code\" benefits. This feature is currently in Alpha. Shift Left Run Anywhere Custodian can be run locally, on an instance, or Serverless in AWS Lambda. License Open Source Cloud Custodian is open source and free for everyone to use and is a CNCF Incubating Project under the Apache 2.0 license . CNCF Simple DSL Use Custodian to build complex workflows or simple queries, millions of policies can be constructed using our easy to read DSL (Domain Specific Language). Examples","title":"The Path to a Well Managed Cloud"},{"location":"calendar/","text":"Event Calendar \u00b6 Contact jorge@stacklet.io if you'd like to add a Cloud Custodian related event to this community calendar.","title":"Event Calendar"},{"location":"calendar/#event-calendar","text":"Contact jorge@stacklet.io if you'd like to add a Cloud Custodian related event to this community calendar.","title":"Event Calendar"},{"location":"community/","text":"Get Involved \u00b6 Community Resources \u00b6 We have a regular community meeting that is open to all users and developers of every skill level. Join Slack Join the mailing list To receive an invite to the meeting, or you can manually add it via the calendar . Community Meetings \u00b6 All meetings are open to the public and recorded: Community Meeting Videos Community Meeting Notes Archive Upcoming Community Events Cloud Custodian Annual Report 2021 - Annual health check provided to the CNCF outlining the health of the project Getting Involved \u00b6 GitHub - Project home page Slack - Real time chat if you're looking for help or interested in contributing to Custodian! Gitter - (Older real time chat, we're likely migrating away from this) Mailing List - Our project mailing list, subscribe here for important project announcements, feel free to ask questions Reddit - Our subreddit StackOverflow - Q&A site for developers, we keep an eye on the cloudcustodian tag YouTube Channel - We're working on adding tutorials and other useful information, as well as meeting videos Governance as Code Day \u00b6 We have an annual Governance as Code Day with recorded talks from the community:","title":"Get Involved"},{"location":"community/#get-involved","text":"","title":"Get Involved"},{"location":"community/#community-resources","text":"We have a regular community meeting that is open to all users and developers of every skill level. Join Slack Join the mailing list To receive an invite to the meeting, or you can manually add it via the calendar .","title":"Community Resources"},{"location":"community/#community-meetings","text":"All meetings are open to the public and recorded: Community Meeting Videos Community Meeting Notes Archive Upcoming Community Events Cloud Custodian Annual Report 2021 - Annual health check provided to the CNCF outlining the health of the project","title":"Community Meetings"},{"location":"community/#getting-involved","text":"GitHub - Project home page Slack - Real time chat if you're looking for help or interested in contributing to Custodian! Gitter - (Older real time chat, we're likely migrating away from this) Mailing List - Our project mailing list, subscribe here for important project announcements, feel free to ask questions Reddit - Our subreddit StackOverflow - Q&A site for developers, we keep an eye on the cloudcustodian tag YouTube Channel - We're working on adding tutorials and other useful information, as well as meeting videos","title":"Getting Involved"},{"location":"community/#governance-as-code-day","text":"We have an annual Governance as Code Day with recorded talks from the community:","title":"Governance as Code Day"},{"location":"documentation/","text":"Documentation \u00b6 Note: This is a placeholder, don't flame me.","title":"Documentation"},{"location":"documentation/#documentation","text":"Note: This is a placeholder, don't flame me.","title":"Documentation"},{"location":"getting-started/","text":"Getting Started \u00b6 Install Cloud Custodian \u00b6 These instructions will install Cloud Custodian. Cloud Custodian is a Python application that supports Python 3 on Linux, MacOS and Windows. We recommend using at least the minimum supported version of Python. If python3 --version shows a Python version that is not actively supported and the steps above don't apply to your environment, you can still install a current release of Python manually. This guide may be a useful reference. Note Some Enterprise/Long Term Support Linux distributions may support Python longer than the upstream support period. If you are in this situation it might be prudent to contact your vendor to see if there are other supported ways to use a more recent version. In some cases using the Docker container might be an appropriate solution. Linux and OSX Windows Docker To install Cloud Custodian : python3 -m venv custodian source custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure # Install Azure package To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp # Install GCP Package To install Cloud Custodian run: python3 -m venv custodian ./custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp To install via docker, run: docker pull cloudcustodian/c7n You'll need to export cloud provider credentials to the container when executing. One example, if you\\'re using environment variables for provider credentials: docker run -it \\ -v $(pwd)/output:/home/custodian/output \\ -v $(pwd)/policy.yml:/home/custodian/policy.yml \\ --env-file <(env | grep \"^AWS\\|^AZURE\\|^GOOGLE\") \\ cloudcustodian/c7n run -v -s /home/custodian/output /home/custodian/policy.yml Note Ensure you install the correct follow-on package depending on the cloud you are deploying to, otherwise you won't have the right modules for that specific cloud. Explore Cloud Custodian \u00b6 Run custodian -h to see a list of available commands. Run custodian schema to see the complete list of cloud resources against which you can run policies. To invoke command-line help with more information about policy schema details, run custodian schema -h . Run custodian schema <cloud-provider> to see the available resources for a specific cloud provider: custodian schema aws Run custodian schema <cloud-provider>.<resource> to see the available filters and actions for each resource. Drill down to get more information about available policy settings for each resource, where the model for the command is:: custodian schema <cloud>.<resource>.<category>.<item> For example: custodian schema aws.s3.filters.is-log-target provides the following information:: Help ---- Filter and return buckets are log destinations. Not suitable for use in lambda on large accounts, This is a api heavy process to detect scan all possible log sources. Sources: - elb (Access Log) - s3 (Access Log) - cfn (Template writes) - cloudtrail :example: .. code-block: yaml policies: - name: s3-log-bucket resource: s3 filters: - type: is-log-target Schema ------ { 'additionalProperties': False, 'properties': { 'type': { 'enum': ['is-log-target']}, 'value': { 'type': 'boolean'}}, 'required': ['type'], 'type': 'object'} Additionally, you can use the schema command to view information on the different supported modes in Cloud Custodian:: custodian schema mode Cloud Provider Specific Help \u00b6 For specific setup isntructions for AWS, Azure, and GCP, visit the relevant getting started page. AWS Azure GCP Troubleshooting & Tinkering \u00b6 The policy is validated automatically when you run it, but you can also validate it separately: custodian validate custodian.yml You can also check which resources are identified by the policy, without running any actions on the resources: custodian run --dryrun -s . custodian.yml Monitor resources \u00b6 Additional commands let you monitor your services in detail. You can generate metrics, log outputs, and output to blob storage in each of the different providers (AWS, Azure, Google Cloud Platform). See the cloud provider specific help at the top of this section for more information. Editor Integration \u00b6 If your preferred editor supports language servers, you can configure it to provide completion and validation while authoring policies. First generate use custodian to generate a json schema file:: custodian schema --json > schema.json Next install a YAML plug-in for your editor, like YAML for Visual Studio Code or coc-yaml for coc.nvim . Both plug-ins use the yaml-language-server under the hood. You'll then need to configure your plug-in to use the generated schema.json as the schema for your policy files. For example in Visual Studio Code, navigate to the settings for the YAML plug-in and under Schemas, edit configuration file and add the following schema configuration:: \"yaml.schemas\": { \"./schema.json\": \"*yml\" }, Note the path to schema.json can either be either relative or the full path. You'll now have completion and validation while authoring policies. Note if you're authoring policies in json you can also configure the json-language-server for the same. Also, if you're seeing errors like 'Request textDocument/hover failed with message: Cannot read property '$ref' of null' try re-creating your schema.json file. Tab Completion \u00b6 To enable command-line tab completion for custodian on bash do the following one-time steps: Run: activate-global-python-argcomplete Now launch a new shell (or refresh your bash environment by sourcing the appropriate file). Troubleshooting \u00b6 If you get an error about \"complete -D\" not being supported, you need to update bash. See the \"Base Version Compatability\" note `in the argcomplete docs . If you have other errors, or for tcsh support, see the argcomplete docs . If you are invoking custodian via the python executable tab completion will not work. You must invoke custodian directly.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install-cloud-custodian","text":"These instructions will install Cloud Custodian. Cloud Custodian is a Python application that supports Python 3 on Linux, MacOS and Windows. We recommend using at least the minimum supported version of Python. If python3 --version shows a Python version that is not actively supported and the steps above don't apply to your environment, you can still install a current release of Python manually. This guide may be a useful reference. Note Some Enterprise/Long Term Support Linux distributions may support Python longer than the upstream support period. If you are in this situation it might be prudent to contact your vendor to see if there are other supported ways to use a more recent version. In some cases using the Docker container might be an appropriate solution. Linux and OSX Windows Docker To install Cloud Custodian : python3 -m venv custodian source custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure # Install Azure package To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp # Install GCP Package To install Cloud Custodian run: python3 -m venv custodian ./custodian/bin/activate pip install c7n # This includes AWS support To install Cloud Custodian for Azure, you will also need to run: pip install c7n_azure To install Cloud Custodian for GCP, you will also need to run: pip install c7n_gcp To install via docker, run: docker pull cloudcustodian/c7n You'll need to export cloud provider credentials to the container when executing. One example, if you\\'re using environment variables for provider credentials: docker run -it \\ -v $(pwd)/output:/home/custodian/output \\ -v $(pwd)/policy.yml:/home/custodian/policy.yml \\ --env-file <(env | grep \"^AWS\\|^AZURE\\|^GOOGLE\") \\ cloudcustodian/c7n run -v -s /home/custodian/output /home/custodian/policy.yml Note Ensure you install the correct follow-on package depending on the cloud you are deploying to, otherwise you won't have the right modules for that specific cloud.","title":"Install Cloud Custodian"},{"location":"getting-started/#explore-cloud-custodian","text":"Run custodian -h to see a list of available commands. Run custodian schema to see the complete list of cloud resources against which you can run policies. To invoke command-line help with more information about policy schema details, run custodian schema -h . Run custodian schema <cloud-provider> to see the available resources for a specific cloud provider: custodian schema aws Run custodian schema <cloud-provider>.<resource> to see the available filters and actions for each resource. Drill down to get more information about available policy settings for each resource, where the model for the command is:: custodian schema <cloud>.<resource>.<category>.<item> For example: custodian schema aws.s3.filters.is-log-target provides the following information:: Help ---- Filter and return buckets are log destinations. Not suitable for use in lambda on large accounts, This is a api heavy process to detect scan all possible log sources. Sources: - elb (Access Log) - s3 (Access Log) - cfn (Template writes) - cloudtrail :example: .. code-block: yaml policies: - name: s3-log-bucket resource: s3 filters: - type: is-log-target Schema ------ { 'additionalProperties': False, 'properties': { 'type': { 'enum': ['is-log-target']}, 'value': { 'type': 'boolean'}}, 'required': ['type'], 'type': 'object'} Additionally, you can use the schema command to view information on the different supported modes in Cloud Custodian:: custodian schema mode","title":"Explore Cloud Custodian"},{"location":"getting-started/#cloud-provider-specific-help","text":"For specific setup isntructions for AWS, Azure, and GCP, visit the relevant getting started page. AWS Azure GCP","title":"Cloud Provider Specific Help"},{"location":"getting-started/#troubleshooting-tinkering","text":"The policy is validated automatically when you run it, but you can also validate it separately: custodian validate custodian.yml You can also check which resources are identified by the policy, without running any actions on the resources: custodian run --dryrun -s . custodian.yml","title":"Troubleshooting &amp; Tinkering"},{"location":"getting-started/#monitor-resources","text":"Additional commands let you monitor your services in detail. You can generate metrics, log outputs, and output to blob storage in each of the different providers (AWS, Azure, Google Cloud Platform). See the cloud provider specific help at the top of this section for more information.","title":"Monitor resources"},{"location":"getting-started/#editor-integration","text":"If your preferred editor supports language servers, you can configure it to provide completion and validation while authoring policies. First generate use custodian to generate a json schema file:: custodian schema --json > schema.json Next install a YAML plug-in for your editor, like YAML for Visual Studio Code or coc-yaml for coc.nvim . Both plug-ins use the yaml-language-server under the hood. You'll then need to configure your plug-in to use the generated schema.json as the schema for your policy files. For example in Visual Studio Code, navigate to the settings for the YAML plug-in and under Schemas, edit configuration file and add the following schema configuration:: \"yaml.schemas\": { \"./schema.json\": \"*yml\" }, Note the path to schema.json can either be either relative or the full path. You'll now have completion and validation while authoring policies. Note if you're authoring policies in json you can also configure the json-language-server for the same. Also, if you're seeing errors like 'Request textDocument/hover failed with message: Cannot read property '$ref' of null' try re-creating your schema.json file.","title":"Editor Integration"},{"location":"getting-started/#tab-completion","text":"To enable command-line tab completion for custodian on bash do the following one-time steps: Run: activate-global-python-argcomplete Now launch a new shell (or refresh your bash environment by sourcing the appropriate file).","title":"Tab Completion"},{"location":"getting-started/#troubleshooting","text":"If you get an error about \"complete -D\" not being supported, you need to update bash. See the \"Base Version Compatability\" note `in the argcomplete docs . If you have other errors, or for tcsh support, see the argcomplete docs . If you are invoking custodian via the python executable tab completion will not work. You must invoke custodian directly.","title":"Troubleshooting"},{"location":"getting-started/actions/","text":"Actions \u00b6 The following actions can be applied to all policies for all resources. See the provider specific resource references. Webhook Action \u00b6 The webhook action allows invoking a webhook with information about your resources. You may initiate a call per resource, or a call referencing a batch of resources. Additionally you may define the body and query string using JMESPath references to the resource or resource array. JMESPath queries for query-params, headers and body will have access to the following data: { 'account_id', 'region', 'execution_id', 'execution_start', 'policy', 'resource', \u2500\u25b6 if Batch == false 'resources', \u2500\u25b6 if Batch == true } Examples: actions : - type : webhook url : http://foo.com?hook-id=123 \u2500\u25b6 Call will default to POST query-params : \u2500\u25b6 Additional query string query-params resource_name : resource.name \u2500\u25b6 Value is a JMESPath query into resource dictionary policy_name : policy.name actions : - type : webhook url : http://foo.com batch : true \u2500\u25b6 Single call for full resource array body : 'resources[].name' \u2500\u25b6 JMESPath will reference array of resources query-params : count : 'resources[] | length(@)' \u2500\u25b6 Include resource count in query string static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks actions : - type : webhook url : http://foo.com batch : true batch-size : 10 method : POST headers : static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks query-params : count : 'resources[] | length(@)'","title":"Actions"},{"location":"getting-started/actions/#actions","text":"The following actions can be applied to all policies for all resources. See the provider specific resource references.","title":"Actions"},{"location":"getting-started/actions/#webhook-action","text":"The webhook action allows invoking a webhook with information about your resources. You may initiate a call per resource, or a call referencing a batch of resources. Additionally you may define the body and query string using JMESPath references to the resource or resource array. JMESPath queries for query-params, headers and body will have access to the following data: { 'account_id', 'region', 'execution_id', 'execution_start', 'policy', 'resource', \u2500\u25b6 if Batch == false 'resources', \u2500\u25b6 if Batch == true } Examples: actions : - type : webhook url : http://foo.com?hook-id=123 \u2500\u25b6 Call will default to POST query-params : \u2500\u25b6 Additional query string query-params resource_name : resource.name \u2500\u25b6 Value is a JMESPath query into resource dictionary policy_name : policy.name actions : - type : webhook url : http://foo.com batch : true \u2500\u25b6 Single call for full resource array body : 'resources[].name' \u2500\u25b6 JMESPath will reference array of resources query-params : count : 'resources[] | length(@)' \u2500\u25b6 Include resource count in query string static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks actions : - type : webhook url : http://foo.com batch : true batch-size : 10 method : POST headers : static-value : '`foo`' \u2500\u25b6 JMESPath string literal in ticks query-params : count : 'resources[] | length(@)'","title":"Webhook Action"},{"location":"getting-started/advanced/","text":"Advanced Usage \u00b6 Running against multiple regions \u00b6 By default Cloud Custodian determines the region to run against in the following order: the --region flag the AWS_DEFAULT_REGION environment variable the region set in the ~/.aws/config file It is possible to run policies against multiple regions by specifying the --region flag multiple times: custodian run -s out --region us-east-1 --region us-west-1 policy.yml If a supplied region does not support the resource for a given policy that region will be skipped. The special all keyword can be used in place of a region to specify the policy should run against all applicable regions for the policy\\'s resource: custodian run -s out --region all policy.yml Note: when running reports against multiple regions the output is placed in a different directory than when running against a single region. See the multi-region reporting section below. Reporting against multiple regions \u00b6 When running against multiple regions the output files are placed in a different location that when running against a single region. When generating a report, specify multiple regions the same way as with the run command: custodian report -s out --region us-east-1 --region-us-west-1 policy.yml A region column will be added to reports generated that include multiple regions to indicate which region each row is from. Conditional Policy Execution \u00b6 Cloud Custodian can skip policies that are included in a policy file when running if the policy specifies conditions that aren\\'t met by the current environment. The available environment keys are: Key Description name Name of the policy region Region the policy is being evaluated in. resource The resource type of the policy. account_id The account id (subscription, project) the policy is being evaluated in. provider The name of the cloud provider (aws, azure, gcp, etc) policy The policy data as structure now The current time event In serverless, the event that triggered the policy account When running in c7n-org, current account info per account config file If a policy is executing in a serverless mode the triggering event is available. As an example, one can set up policy conditions to only execute between a given set of dates. policies : # other compliance related policies that # should always be running... - name : holiday-break-stop description : | This policy will stop all EC2 instances if the current date is between 12-15-2018 to 12-31-2018 when the policy is run. Use this in conjunction with a cron job to ensure that the environment is fully turned off during the break. resource : ec2 conditions : - type : value key : now op : greater-than value_type : date value : \"2018-12-15\" - type : value key : now op : less-than value_type : date value : \"2018-12-31\" filters : - \"tag:holiday-off-hours\" : present actions : - stop - name : holiday-break-start description : | This policy will start up all EC2 instances and only run on 1-1-2019. resource : ec2 conditions : - type : value key : now value_type : date op : greater-than value : \"2009-1-1\" - type : value key : now value_type : date op : less-than value : \"2019-1-1 23:59:59\" filters : - \"tag:holiday-off-hours\" : present actions : - start Limiting how many resources custodian affects \u00b6 Custodian by default will operate on as many resources exist within an environment that match a policy\\'s filters. Custodian also allows policy authors to stop policy execution if a policy affects more resources than expected, either as a number of resources or as a percentage of total extant resources. policies : - name : log-delete description : | This policy will delete all log groups that haven't been written to in 5 days. As a safety belt, it will stop execution if the number of log groups that would be affected is more than 5% of the total log groups in the account's region. resource : aws.log-group max-resources-percent : 5 filters : - type : last-write days : 5 actions : - delete Max resources can also be specified as an absolute number using [max-resources]{.title-ref} specified on a policy. When executing if the limit is exceeded, policy execution is stopped before taking any actions: custodian run -s out policy.yml custodian.commands:ERROR policy: log-delete exceeded resource limit: 2.5% found: 1 total: 1 If metrics are being published (-m/--metrics) then an additional metric named [ResourceCount]{.title-ref} will be published with the number of resources that matched the policy. Max resources can also be specified as an object with an [or]{.title-ref} or [and]{.title-ref} operator if you would like both a resource percent and a resource amount enforced. policies : - name : log-delete description : | This policy will not execute if the resources affected are over 50% of the total resource type amount and that amount is over 20. resource : aws.log-group max-resources : percent : 50 amount : 20 op : and filters : - type : last-write days : 5 actions : - delete Adding custom fields to reports \u00b6 Reports use a default set of fields that are resource-specific. To add other fields use the --field flag, which can be supplied multiple times. The syntax is: --field KEY=VALUE where KEY is the header name (what will print at the top of the column) and the VALUE is a JMESPath expression accessing the desired data: custodian report -s out --field Image=ImageId policy.yml If hyphens or other special characters are present in the JMESPath it may require quoting, e.g.: custodian report -s . --field \"AccessKey1LastRotated\"='\"c7n:credential-report\".access_keys[0].last_rotated' policy.yml To remove the default fields and only add the desired ones, the --no-default-fields flag can be specified and then specific fields can be added in, e.g.: custodian report -s out --no-default-fields --field Image=ImageId policy.yml","title":"Advanced Usage"},{"location":"getting-started/advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"getting-started/advanced/#running-against-multiple-regions","text":"By default Cloud Custodian determines the region to run against in the following order: the --region flag the AWS_DEFAULT_REGION environment variable the region set in the ~/.aws/config file It is possible to run policies against multiple regions by specifying the --region flag multiple times: custodian run -s out --region us-east-1 --region us-west-1 policy.yml If a supplied region does not support the resource for a given policy that region will be skipped. The special all keyword can be used in place of a region to specify the policy should run against all applicable regions for the policy\\'s resource: custodian run -s out --region all policy.yml Note: when running reports against multiple regions the output is placed in a different directory than when running against a single region. See the multi-region reporting section below.","title":"Running against multiple regions"},{"location":"getting-started/advanced/#reporting-against-multiple-regions","text":"When running against multiple regions the output files are placed in a different location that when running against a single region. When generating a report, specify multiple regions the same way as with the run command: custodian report -s out --region us-east-1 --region-us-west-1 policy.yml A region column will be added to reports generated that include multiple regions to indicate which region each row is from.","title":"Reporting against multiple regions"},{"location":"getting-started/advanced/#conditional-policy-execution","text":"Cloud Custodian can skip policies that are included in a policy file when running if the policy specifies conditions that aren\\'t met by the current environment. The available environment keys are: Key Description name Name of the policy region Region the policy is being evaluated in. resource The resource type of the policy. account_id The account id (subscription, project) the policy is being evaluated in. provider The name of the cloud provider (aws, azure, gcp, etc) policy The policy data as structure now The current time event In serverless, the event that triggered the policy account When running in c7n-org, current account info per account config file If a policy is executing in a serverless mode the triggering event is available. As an example, one can set up policy conditions to only execute between a given set of dates. policies : # other compliance related policies that # should always be running... - name : holiday-break-stop description : | This policy will stop all EC2 instances if the current date is between 12-15-2018 to 12-31-2018 when the policy is run. Use this in conjunction with a cron job to ensure that the environment is fully turned off during the break. resource : ec2 conditions : - type : value key : now op : greater-than value_type : date value : \"2018-12-15\" - type : value key : now op : less-than value_type : date value : \"2018-12-31\" filters : - \"tag:holiday-off-hours\" : present actions : - stop - name : holiday-break-start description : | This policy will start up all EC2 instances and only run on 1-1-2019. resource : ec2 conditions : - type : value key : now value_type : date op : greater-than value : \"2009-1-1\" - type : value key : now value_type : date op : less-than value : \"2019-1-1 23:59:59\" filters : - \"tag:holiday-off-hours\" : present actions : - start","title":"Conditional Policy Execution"},{"location":"getting-started/advanced/#limiting-how-many-resources-custodian-affects","text":"Custodian by default will operate on as many resources exist within an environment that match a policy\\'s filters. Custodian also allows policy authors to stop policy execution if a policy affects more resources than expected, either as a number of resources or as a percentage of total extant resources. policies : - name : log-delete description : | This policy will delete all log groups that haven't been written to in 5 days. As a safety belt, it will stop execution if the number of log groups that would be affected is more than 5% of the total log groups in the account's region. resource : aws.log-group max-resources-percent : 5 filters : - type : last-write days : 5 actions : - delete Max resources can also be specified as an absolute number using [max-resources]{.title-ref} specified on a policy. When executing if the limit is exceeded, policy execution is stopped before taking any actions: custodian run -s out policy.yml custodian.commands:ERROR policy: log-delete exceeded resource limit: 2.5% found: 1 total: 1 If metrics are being published (-m/--metrics) then an additional metric named [ResourceCount]{.title-ref} will be published with the number of resources that matched the policy. Max resources can also be specified as an object with an [or]{.title-ref} or [and]{.title-ref} operator if you would like both a resource percent and a resource amount enforced. policies : - name : log-delete description : | This policy will not execute if the resources affected are over 50% of the total resource type amount and that amount is over 20. resource : aws.log-group max-resources : percent : 50 amount : 20 op : and filters : - type : last-write days : 5 actions : - delete","title":"Limiting how many resources custodian affects"},{"location":"getting-started/advanced/#adding-custom-fields-to-reports","text":"Reports use a default set of fields that are resource-specific. To add other fields use the --field flag, which can be supplied multiple times. The syntax is: --field KEY=VALUE where KEY is the header name (what will print at the top of the column) and the VALUE is a JMESPath expression accessing the desired data: custodian report -s out --field Image=ImageId policy.yml If hyphens or other special characters are present in the JMESPath it may require quoting, e.g.: custodian report -s . --field \"AccessKey1LastRotated\"='\"c7n:credential-report\".access_keys[0].last_rotated' policy.yml To remove the default fields and only add the desired ones, the --no-default-fields flag can be specified and then specific fields can be added in, e.g.: custodian report -s out --no-default-fields --field Image=ImageId policy.yml","title":"Adding custom fields to reports"},{"location":"getting-started/filters/","text":"Generic Filters \u00b6 The following filters can be applied to all policies for all resources. See the provider specific resource reference for additional information. Value Filter \u00b6 Cloud Custodian provides for a flexible query language on any resource by allowing for rich queries on JSON objects via JMESPath, and allows for mixing and combining those with boolean conditional operators that are nest-able. (Tutorial here on JMESPath syntax) The base value filter enables the use of jmespath with data returned from a describe call. filters : - type : value key : \"State[0]\" \u2500\u25b6 The value from the describe call value : \"running\" \u2500\u25b6 Value that is being filtered against There are several ways to get a list of possible keys for each resource. Via Custodian CLI Create a new custodian yaml file with just the name and resource fields. Then run custodian run -s OUTPUT_DIR . The valid key fields can be found in the output directory in resources.json policies : - name : my-first-policy resource : aws.ec2 Via Cloud Providers CLI Use the relevant cloud provider cli to run the describe call to view all available keys. For example using aws cli run aws ec2 describe-instances or with azure az vm list . Note: You do not need to include the outermost json field in most cases since custodian removes this field from the results. Via Cloud Provider Documentation Go to the relevant cloud provider sdk documentation and search for the describe api call for the resource you\\'re interested in. The available fields will be listed under the results of that api call. Comparison operators: : The generic value filter allows for comparison operators to be used - `equal` or `eq` - `not-equal` or `ne` - `greater-than` or `gt` - `gte` or `ge` - `less-than` or `lt` - `lte` or `le` filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared op : greater-than \u2500\u25b6 Comparison Operator Other operators: : - absent - present - not-null - empty - contains filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : present \u2500\u25b6 Checks if key is present Logical Operators: : - or or Or - and or And - not filters : - or : \u2500\u25b6 Logical Operator - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 42 \u2500\u25b6 Value that is being compared List Operators: : There is a collection of operators that can be used with user supplied lists. The operators are evaluated as value from key in (the operator) given value . If you would like it evaluated in the opposite way given value in (the operator) value from key then you can include the swap transformation or use the contains operator. - `in` - `not-in` or `ni` - `intersect` - Provides comparison between 2 lists filters : - type : value key : ImageId \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : [ ID-123 , ID-321 ] \u2500\u25b6 List of Values to be compared against filters : - type : value key : ImageId.List \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : ID-321 \u2500\u25b6 Values to be compared against value_type : swap \u2500\u25b6 Switches list comparison order Special operators: : - glob - Provides Glob matching support - regex - Provides Regex matching support but ignores case (1) - regex-case - Provides case sensitive Regex matching support (1) filters : - type : value key : FunctionName \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '(custodian|c7n)_\\w+' \u2500\u25b6 Regex string : match all values beginning with custodian_ or c7n_ - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^.*c7n.*$' \u2500\u25b6 Regex string : match all values containing c7n - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^((?!c7n).)*$' \u2500\u25b6 Regex string : match all values not containing c7n These operators are implemented using re.match . If a filter isn\\'t working as expected take a look at the [re]{.title-ref}__ documentation. __ https://docs.python.org/3/library/re.html#search-vs-match Transformations: Transformations on the value can be done using the value_type keyword. The following value types are supported: age - convert to a datetime (for past date comparisons) cidr - parse an ipaddress cidr_size - the length of the network prefix expiration - convert to a datetime (for future date comparisons) integer - convert the value to an integer normalize - convert the value to lowercase resource_count - compare against the number of matched resources size - the length of an element swap - swap the value and the evaluated key date - parse the filter\\'s value as a date. Note that the [age]{.title-ref} and [expiration]{.title-ref} transformations expect a value given as a number of days. Use a floating point value to match time periods shorter than a day. Examples: # Get the size of a group - type : value key : SecurityGroups[].GroupId value_type : size value : 2 # Membership example using swap - type : value key : SecurityGroups[].GroupId value_type : swap op : in value : sg-49b87f44 # Convert to integer before comparison - type : value key : tag:Count op : greater-than value_type : integer value : 0 # Apply only to rds instances created after the given date - type : value key : InstanceCreateTime op : greater-than value_type : date value : \"2019/05/01\" # Find instances launched within the last 31 days - type : value key : LaunchTime op : less-than value_type : age value : 32 # Find instances launched within the past 12 hours - type : value key : LaunchTime op : less-than value_type : age value : 0.5 # Use `resource_count` to filter resources based on the number that matched # Note that no `key` is used for this value_type since it is matching on # the size of the list of resources and not a specific field. - type : value value_type : resource_count op : lt value : 2 # This policy will use `intersect` op to compare rds instances subnet group list # against a user provided list of public subnets from a s3 txt file. - name : find-rds-on-public-subnets-using-s3-list comment : | The txt file needs to be in utf-8 no BOM format and contain one subnet per line in the file no quotes around the subnets either. resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value_from : url : s3://cloud-custodian-bucket/PublicSubnets.txt format : txt # This policy will compare rds instances subnet group list against a # inline user provided list of public subnets. - name : find-rds-on-public-subnets-using-inline-list resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value : - subnet-2a8374658 - subnet-1b8474522 - subnet-2d2736444 Value Regex: When using a Value Filter, a value_regex can be specified. This will mean that the value used for comparison is the output from evaluating a regex on the value found on a resource using [key]{.title-ref}. The filter expects that there will be exactly one capturing group, however non-capturing groups can be specified as well, e.g. (?:newkey|oldkey) . Note that if the value regex does not find a match, it will return a None value. In this example there is an expiration comparison, which needs a datetime, however the tag containing this information also has other data in it. By setting the value_regex to capture just the datetime part of the tag, the filter can be evaluated as normal. # Find expiry from tag contents - type : value key : \"tag:metadata\" value_type : expiration value_regex : \".*delete_after=([0-9]{4}-[0-9]{2}-[0-9]{2}).*\" op : less-than value : 0 Value From: value_from allows the use of external values in the Value Filter ::: {.autodoconly} c7n.resolver.ValuesFrom ::: Event Filter \u00b6 Filter against a CloudWatch event JSON associated to a resource type. The list of possible keys are now from the cloudtrail event and not the describe resource call as is the case in the ValueFilter - name : no-ec2-public-ips resource : aws.ec2 mode : type : cloudtrail events : - RunInstances filters : - type : event \u2500\u2510 The key is a JMESPath Query of key : \"detail.requestParameters.networkInterfaceSet.items[].associatePublicIpAddress\" \u251c\u25b6the event JSON from CloudWatch value : true \u2500\u2518 actions : - type : terminate force : true Reduce Filter \u00b6 The reduce filter lets you group, sort, and limit the number of resources to act on. Maybe you want to delete AMIs, but want to do it in small batches where you act on the oldest AMIs first. Or maybe you want to do some chaos engineering and randomly select ec2 instances part of ASGs, but want to make sure no more than one instance per ASG is affected. This filter lets you do that. This works using this process: Group resources Sort each group of resources Selecting a number of resources in each group Combine the resulting resources Grouping resources \u00b6 Resources are grouped based on the value extracted as defined by the group-by attribute. All resources not able to extract a value are placed in a group by themselves. This is also the case when group-by is not specified. Sorting resources \u00b6 Sorting of individual resources within a group is controlled by a combination of the sort-by and order attributes. sort-by determines which value to use to sort and order controls how they are sorted. For any resources with a null value, those are by default sorted last. You can optionally sort those first with the null-order attribute. Note: if neither sort-by or order are specified, no sorting is done. Selecting resources \u00b6 Once groups have been sorted, we can then apply rules to select a specific number of resources in each group. We first discard some resources and then limit the remaining set to a maximum count. When the discard or discard-percent attributes are specified, we take the ordered resources in each group and discard the first discard-percent of them or discard absolute count, whichever is larger. After discarding resources, we then limit the remaining set. limit-percent is applied first to reduce the number of resources to this percentage of the original. limit is then applied to allow for an absolute count. Resources are kept from the beginning of the list. To explain this with an example, suppose you have 50 resources in a group with all of these set: discard : 5 discard-percent : 20 limit : 10 limit-percent : 30 This would first discard the first 10 resources because 20 percent of 50 is 10, which is greater than 5. You now have 40 resources left in the group and the limit settings are applied. 30% of 40 is 12, but limit is set to 10, which is lower, so the first 10 of the remaining are kept. If they were numbered #1-50, you\\'d have discarded 1-10, kept 11-20, and dropped the remaining 21-50. If you had the following settings: discard-percent : 25 limit-percent : 50 We\\'d discard the first 25% of 50 (12), then of the remaining 38 resources, we\\'d keep 50% of those (19). You\\'d end up with resources 13-31. Now, some of these could eliminate all resources from a group. If you have 20 resources in one group and 5 in another and specify limit-percent = 10 , you\\'ll get 2 resources from the first group and 0 resources from the second. Combining resource groups \u00b6 Once the groups have been modified, we now need to combine them back to one set of resources. Since the groups are determined by a JMESPath expression, we sort the groups first based on the order attribute the same way we sort within a group. After the groups are sorted, it\\'s a simple concatenation of resources. Attributes \u00b6 group-by , sort-by These are both defined the same way... Note: For simplicity, you can specify these as just a single string which is treated as the key . key - The JMESPath expression to extract a value value_regex - A regular expression with a single capture group that extracts a portion of the result of the key expression. value_type - parse the value as one of the following: string (default) number date order controls how to sorting is done asc (default) - sort in ascending order based on key desc - sort in descending order based on key reverse - reverse the order of resources (ignores key ) randomize - randomize the order of resources (ignores key ) null-order - when sorting, where to put resources that have a null value last (default) - at the end of the list first - at the start of the list discard - discard the first N resources within each group discard-percent - discard the first N percentage of resources within each group limit - select the first N resources within each group (after discards) limit-percent - select the first N percentage of resources within each group (after discards) Examples \u00b6 This example will select the longest running instance from each ASG, then randomly choose 10% of those, making sure to not affect more than 15 instances total, then terminate them. - name : chaos-engineering resource : aws.ec2 filters : - \"State.Name\" : \"running\" - \"tag:aws:autoscaling:groupName\" : present - type : reduce group-by : \"tag:aws:autoscaling:groupName\" sort-by : \"LaunchTime\" order : asc limit : 1 - type : reduce order : randomize limit : 15 limit-percent : 10 actions : - terminate This example will delete old AMIs, but make sure to only do the top 10 based on age. - name : limited-ami-expiration resource : aws.ami filters : - type : image-age days : 180 op : ge - type : reduce sort-by : \"CreationDate\" order : asc limit : 10 actions : - deregister This example simply sorts the resources by when they are marked for expiration. We use a date type because the tags might be in different date formats or are not text-sortable. - name : ami-expiration-by-expire-date resource : aws.ami filters : - type : value key : \"tag:expire-after\" value_type : age op : gt value : 0 - type : reduce sort-by : key : \"tag:expire-after\" value_type : date order : asc limit : 10 actions : - deregister","title":"Filters"},{"location":"getting-started/filters/#filters","text":"The following filters can be applied to all policies for all resources. See the provider specific resource reference for additional information.","title":"Generic Filters"},{"location":"getting-started/filters/#value-filter","text":"Cloud Custodian provides for a flexible query language on any resource by allowing for rich queries on JSON objects via JMESPath, and allows for mixing and combining those with boolean conditional operators that are nest-able. (Tutorial here on JMESPath syntax) The base value filter enables the use of jmespath with data returned from a describe call. filters : - type : value key : \"State[0]\" \u2500\u25b6 The value from the describe call value : \"running\" \u2500\u25b6 Value that is being filtered against There are several ways to get a list of possible keys for each resource. Via Custodian CLI Create a new custodian yaml file with just the name and resource fields. Then run custodian run -s OUTPUT_DIR . The valid key fields can be found in the output directory in resources.json policies : - name : my-first-policy resource : aws.ec2 Via Cloud Providers CLI Use the relevant cloud provider cli to run the describe call to view all available keys. For example using aws cli run aws ec2 describe-instances or with azure az vm list . Note: You do not need to include the outermost json field in most cases since custodian removes this field from the results. Via Cloud Provider Documentation Go to the relevant cloud provider sdk documentation and search for the describe api call for the resource you\\'re interested in. The available fields will be listed under the results of that api call. Comparison operators: : The generic value filter allows for comparison operators to be used - `equal` or `eq` - `not-equal` or `ne` - `greater-than` or `gt` - `gte` or `ge` - `less-than` or `lt` - `lte` or `le` filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared op : greater-than \u2500\u25b6 Comparison Operator Other operators: : - absent - present - not-null - empty - contains filters : - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : present \u2500\u25b6 Checks if key is present Logical Operators: : - or or Or - and or And - not filters : - or : \u2500\u25b6 Logical Operator - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 36 \u2500\u25b6 Value that is being compared - type : value key : CpuOptions.CoreCount \u2500\u25b6 The value from the describe call value : 42 \u2500\u25b6 Value that is being compared List Operators: : There is a collection of operators that can be used with user supplied lists. The operators are evaluated as value from key in (the operator) given value . If you would like it evaluated in the opposite way given value in (the operator) value from key then you can include the swap transformation or use the contains operator. - `in` - `not-in` or `ni` - `intersect` - Provides comparison between 2 lists filters : - type : value key : ImageId \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : [ ID-123 , ID-321 ] \u2500\u25b6 List of Values to be compared against filters : - type : value key : ImageId.List \u2500\u25b6 The value from the describe call op : in \u2500\u25b6 List operator value : ID-321 \u2500\u25b6 Values to be compared against value_type : swap \u2500\u25b6 Switches list comparison order Special operators: : - glob - Provides Glob matching support - regex - Provides Regex matching support but ignores case (1) - regex-case - Provides case sensitive Regex matching support (1) filters : - type : value key : FunctionName \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '(custodian|c7n)_\\w+' \u2500\u25b6 Regex string : match all values beginning with custodian_ or c7n_ - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^.*c7n.*$' \u2500\u25b6 Regex string : match all values containing c7n - type : value key : name \u2500\u25b6 The value from the describe call, or resources.json op : regex \u2500\u25b6 Special operator value : '^((?!c7n).)*$' \u2500\u25b6 Regex string : match all values not containing c7n These operators are implemented using re.match . If a filter isn\\'t working as expected take a look at the [re]{.title-ref}__ documentation. __ https://docs.python.org/3/library/re.html#search-vs-match Transformations: Transformations on the value can be done using the value_type keyword. The following value types are supported: age - convert to a datetime (for past date comparisons) cidr - parse an ipaddress cidr_size - the length of the network prefix expiration - convert to a datetime (for future date comparisons) integer - convert the value to an integer normalize - convert the value to lowercase resource_count - compare against the number of matched resources size - the length of an element swap - swap the value and the evaluated key date - parse the filter\\'s value as a date. Note that the [age]{.title-ref} and [expiration]{.title-ref} transformations expect a value given as a number of days. Use a floating point value to match time periods shorter than a day. Examples: # Get the size of a group - type : value key : SecurityGroups[].GroupId value_type : size value : 2 # Membership example using swap - type : value key : SecurityGroups[].GroupId value_type : swap op : in value : sg-49b87f44 # Convert to integer before comparison - type : value key : tag:Count op : greater-than value_type : integer value : 0 # Apply only to rds instances created after the given date - type : value key : InstanceCreateTime op : greater-than value_type : date value : \"2019/05/01\" # Find instances launched within the last 31 days - type : value key : LaunchTime op : less-than value_type : age value : 32 # Find instances launched within the past 12 hours - type : value key : LaunchTime op : less-than value_type : age value : 0.5 # Use `resource_count` to filter resources based on the number that matched # Note that no `key` is used for this value_type since it is matching on # the size of the list of resources and not a specific field. - type : value value_type : resource_count op : lt value : 2 # This policy will use `intersect` op to compare rds instances subnet group list # against a user provided list of public subnets from a s3 txt file. - name : find-rds-on-public-subnets-using-s3-list comment : | The txt file needs to be in utf-8 no BOM format and contain one subnet per line in the file no quotes around the subnets either. resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value_from : url : s3://cloud-custodian-bucket/PublicSubnets.txt format : txt # This policy will compare rds instances subnet group list against a # inline user provided list of public subnets. - name : find-rds-on-public-subnets-using-inline-list resource : aws.rds filters : - type : value key : \"DBSubnetGroup.Subnets[].SubnetIdentifier\" op : intersect value : - subnet-2a8374658 - subnet-1b8474522 - subnet-2d2736444 Value Regex: When using a Value Filter, a value_regex can be specified. This will mean that the value used for comparison is the output from evaluating a regex on the value found on a resource using [key]{.title-ref}. The filter expects that there will be exactly one capturing group, however non-capturing groups can be specified as well, e.g. (?:newkey|oldkey) . Note that if the value regex does not find a match, it will return a None value. In this example there is an expiration comparison, which needs a datetime, however the tag containing this information also has other data in it. By setting the value_regex to capture just the datetime part of the tag, the filter can be evaluated as normal. # Find expiry from tag contents - type : value key : \"tag:metadata\" value_type : expiration value_regex : \".*delete_after=([0-9]{4}-[0-9]{2}-[0-9]{2}).*\" op : less-than value : 0 Value From: value_from allows the use of external values in the Value Filter ::: {.autodoconly} c7n.resolver.ValuesFrom :::","title":"Value Filter"},{"location":"getting-started/filters/#event-filter","text":"Filter against a CloudWatch event JSON associated to a resource type. The list of possible keys are now from the cloudtrail event and not the describe resource call as is the case in the ValueFilter - name : no-ec2-public-ips resource : aws.ec2 mode : type : cloudtrail events : - RunInstances filters : - type : event \u2500\u2510 The key is a JMESPath Query of key : \"detail.requestParameters.networkInterfaceSet.items[].associatePublicIpAddress\" \u251c\u25b6the event JSON from CloudWatch value : true \u2500\u2518 actions : - type : terminate force : true","title":"Event Filter"},{"location":"getting-started/filters/#reduce-filter","text":"The reduce filter lets you group, sort, and limit the number of resources to act on. Maybe you want to delete AMIs, but want to do it in small batches where you act on the oldest AMIs first. Or maybe you want to do some chaos engineering and randomly select ec2 instances part of ASGs, but want to make sure no more than one instance per ASG is affected. This filter lets you do that. This works using this process: Group resources Sort each group of resources Selecting a number of resources in each group Combine the resulting resources","title":"Reduce Filter"},{"location":"getting-started/filters/#grouping-resources","text":"Resources are grouped based on the value extracted as defined by the group-by attribute. All resources not able to extract a value are placed in a group by themselves. This is also the case when group-by is not specified.","title":"Grouping resources"},{"location":"getting-started/filters/#sorting-resources","text":"Sorting of individual resources within a group is controlled by a combination of the sort-by and order attributes. sort-by determines which value to use to sort and order controls how they are sorted. For any resources with a null value, those are by default sorted last. You can optionally sort those first with the null-order attribute. Note: if neither sort-by or order are specified, no sorting is done.","title":"Sorting resources"},{"location":"getting-started/filters/#selecting-resources","text":"Once groups have been sorted, we can then apply rules to select a specific number of resources in each group. We first discard some resources and then limit the remaining set to a maximum count. When the discard or discard-percent attributes are specified, we take the ordered resources in each group and discard the first discard-percent of them or discard absolute count, whichever is larger. After discarding resources, we then limit the remaining set. limit-percent is applied first to reduce the number of resources to this percentage of the original. limit is then applied to allow for an absolute count. Resources are kept from the beginning of the list. To explain this with an example, suppose you have 50 resources in a group with all of these set: discard : 5 discard-percent : 20 limit : 10 limit-percent : 30 This would first discard the first 10 resources because 20 percent of 50 is 10, which is greater than 5. You now have 40 resources left in the group and the limit settings are applied. 30% of 40 is 12, but limit is set to 10, which is lower, so the first 10 of the remaining are kept. If they were numbered #1-50, you\\'d have discarded 1-10, kept 11-20, and dropped the remaining 21-50. If you had the following settings: discard-percent : 25 limit-percent : 50 We\\'d discard the first 25% of 50 (12), then of the remaining 38 resources, we\\'d keep 50% of those (19). You\\'d end up with resources 13-31. Now, some of these could eliminate all resources from a group. If you have 20 resources in one group and 5 in another and specify limit-percent = 10 , you\\'ll get 2 resources from the first group and 0 resources from the second.","title":"Selecting resources"},{"location":"getting-started/filters/#combining-resource-groups","text":"Once the groups have been modified, we now need to combine them back to one set of resources. Since the groups are determined by a JMESPath expression, we sort the groups first based on the order attribute the same way we sort within a group. After the groups are sorted, it\\'s a simple concatenation of resources.","title":"Combining resource groups"},{"location":"getting-started/filters/#attributes","text":"group-by , sort-by These are both defined the same way... Note: For simplicity, you can specify these as just a single string which is treated as the key . key - The JMESPath expression to extract a value value_regex - A regular expression with a single capture group that extracts a portion of the result of the key expression. value_type - parse the value as one of the following: string (default) number date order controls how to sorting is done asc (default) - sort in ascending order based on key desc - sort in descending order based on key reverse - reverse the order of resources (ignores key ) randomize - randomize the order of resources (ignores key ) null-order - when sorting, where to put resources that have a null value last (default) - at the end of the list first - at the start of the list discard - discard the first N resources within each group discard-percent - discard the first N percentage of resources within each group limit - select the first N resources within each group (after discards) limit-percent - select the first N percentage of resources within each group (after discards)","title":"Attributes"},{"location":"getting-started/filters/#examples","text":"This example will select the longest running instance from each ASG, then randomly choose 10% of those, making sure to not affect more than 15 instances total, then terminate them. - name : chaos-engineering resource : aws.ec2 filters : - \"State.Name\" : \"running\" - \"tag:aws:autoscaling:groupName\" : present - type : reduce group-by : \"tag:aws:autoscaling:groupName\" sort-by : \"LaunchTime\" order : asc limit : 1 - type : reduce order : randomize limit : 15 limit-percent : 10 actions : - terminate This example will delete old AMIs, but make sure to only do the top 10 based on age. - name : limited-ami-expiration resource : aws.ami filters : - type : image-age days : 180 op : ge - type : reduce sort-by : \"CreationDate\" order : asc limit : 10 actions : - deregister This example simply sorts the resources by when they are marked for expiration. We use a date type because the tags might be in different date formats or are not text-sortable. - name : ami-expiration-by-expire-date resource : aws.ami filters : - type : value key : \"tag:expire-after\" value_type : age op : gt value : 0 - type : reduce sort-by : key : \"tag:expire-after\" value_type : date order : asc limit : 10 actions : - deregister","title":"Examples"},{"location":"getting-started/policyStructure/","text":"Example Tag Compliance Policy \u00b6 In this sample policy we are filtering for EC2 instances that are: Running Not part of an Auto Scaling Group (ASG) Not already marked for an operation Have less than 10 tags Missing one or more of the required tags. Once Custodian has filtered the list, it will mark all EC2 instances that match the above criteria with a tag. That tag specifies an action that will take place at a certain time. This policy is one of three that are needed to manage tag compliance. The other two policies in this set are: Checking to see if the tags have been corrected before the four day period is up Performing the operation of stopping all instances with the status to be stopped on that particular day. - name : ec2-tag-compliance-mark resource : ec2 comment : | Mark non-compliant, Non-ASG EC2 instances with stoppage in 4 days filters : \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"State.Name\" : running \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"tag:aws:autoscaling:groupName\" : absent \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500 - \"tag:c7n_status\" : absent \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500 - type : tag-count \u2502 \u2502 \u2502 \u2502 - or : \u2500\u2510 \u2502 \u2502 \u2502 \u2502 - \"tag:Owner\" : absent \u251c\u2500If any of these tags are \u2502 \u2502 \u2502 \u2502 - \"tag:CostCenter\" : absent \u2502 missing, then select instance \u2502 \u2502 \u2502 \u2502 - \"tag:Project\" : absent \u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 actions : \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 For selected instances, run this action \u2502 \u2502 \u2502 \u2502 - type : mark-for-op \u2500\u2500\u2500\u2500\u25b6 Mark instance for operation \u2502 \u2502 \u2502 \u2502 op : stop \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 Stop instance \u2502 \u2502 \u2502 \u2502 days : 4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 After 4 days \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u25b6 If instance has 10 tags, skip \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance already has a c7n_status, skip \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is part of an ASG, skip \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is not running, skip","title":"Example Tag Compliance Policy"},{"location":"getting-started/policyStructure/#example-tag-compliance-policy","text":"In this sample policy we are filtering for EC2 instances that are: Running Not part of an Auto Scaling Group (ASG) Not already marked for an operation Have less than 10 tags Missing one or more of the required tags. Once Custodian has filtered the list, it will mark all EC2 instances that match the above criteria with a tag. That tag specifies an action that will take place at a certain time. This policy is one of three that are needed to manage tag compliance. The other two policies in this set are: Checking to see if the tags have been corrected before the four day period is up Performing the operation of stopping all instances with the status to be stopped on that particular day. - name : ec2-tag-compliance-mark resource : ec2 comment : | Mark non-compliant, Non-ASG EC2 instances with stoppage in 4 days filters : \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"State.Name\" : running \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500 - \"tag:aws:autoscaling:groupName\" : absent \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500 - \"tag:c7n_status\" : absent \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500 - type : tag-count \u2502 \u2502 \u2502 \u2502 - or : \u2500\u2510 \u2502 \u2502 \u2502 \u2502 - \"tag:Owner\" : absent \u251c\u2500If any of these tags are \u2502 \u2502 \u2502 \u2502 - \"tag:CostCenter\" : absent \u2502 missing, then select instance \u2502 \u2502 \u2502 \u2502 - \"tag:Project\" : absent \u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 actions : \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 For selected instances, run this action \u2502 \u2502 \u2502 \u2502 - type : mark-for-op \u2500\u2500\u2500\u2500\u25b6 Mark instance for operation \u2502 \u2502 \u2502 \u2502 op : stop \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 Stop instance \u2502 \u2502 \u2502 \u2502 days : 4 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 After 4 days \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u25b6 If instance has 10 tags, skip \u2502 \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance already has a c7n_status, skip \u2502 \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is part of an ASG, skip \u25a3\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 If instance is not running, skip","title":"Example Tag Compliance Policy"}]}