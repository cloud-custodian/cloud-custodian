name: 'Build and Publish Docker Image'
description: 'Build and Publish Docker Image'
inputs:
  custodian_image_var:
    description: 'env var name for custodian image'
    required: true
  dockerfile:
    description: 'Dockerfile to build'
    required: true
  repository:
    description: 'docker hub repository'
    required: true
  image:
    description: 'image'
    required: true
  name:
    description: 'image name'
    required: true
  push:
    description: 'push image: true/false'
    required: true
    default: false
  poetry_version:
    description: "Poetry Version to use"
    default: "1.1.14"
  trivy_version:
    description: "trivy version to use"
    default: "0.5.4"
runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install Docker Build Env
      # bin directory is in .dockerignore
      shell: bash
      run: |
        python -m pip install --upgrade pip click
        mkdir -p bin

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ env.HUB_USER }}
        password: ${{ env.HUB_TOKEN }}

    - name: determine tags
      shell: bash
      id: calctags
      run: |
        python tools/dev/dockerpkg.py tags -t auto
        echo "::set-output name=tags::$(python tools/dev/dockerpkg.py tags -t auto)"

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        build-args: |
          POETRY_VERSION = ${{ inputs.poetry_version }}
        images: |
          ${{ inputs.repository }}/${{ inputs.image }}
        tags: |
          # this is a hack to get around the fact that passing in tags with a new line character doesnt work
          # ensure that we dont have more than 5 tags at a time
          ${{ steps.calctags.outputs.tag0 }}
          ${{ steps.calctags.outputs.tag1 }}
          ${{ steps.calctags.outputs.tag2 }}
          ${{ steps.calctags.outputs.tag3 }}
          ${{ steps.calctags.outputs.tag4 }}
        sep-tags: ','

    # build a single platform image first in order to actually load the image from buildx
    # manifests are not supported yet
    # https://github.com/docker/buildx/issues/166
    # https://github.com/docker/buildx/issues/59
    - name: Build
      uses: docker/build-push-action@v3.1.1
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # makes the image available in docker, e.g. docker images inspect
        load: true
        file: ${{ inputs.dockerfile }}

    - name: scan
      shell: bash
      env:
        tags: ${{ steps.meta.outputs.tags }}
      run: |
        wget -q -O bin/trivy.tgz https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy_version }}/trivy_${{ inputs.trivy_version }}_Linux-64bit.tar.gz
        cd bin && tar xzf trivy.tgz
        ./trivy $(echo $tags | cut -d ',' -f 1)
        cd ..

    - name: test
      shell: bash
      env:
        tags: ${{ steps.meta.outputs.tags }}
      run : |
        curl -sL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python - -y --version ${{ inputs.poetry_version }}
        python -m venv .
        . bin/activate && poetry install
        . bin/activate && pip install docker
        . bin/activate && TEST_DOCKER=yes \
                          ${{ inputs.custodian_image_var }}="$(echo $tags | cut -d ',' -f 1)" \
                          pytest -p no:terraform -v tests/test_docker.py

    # actually push the multi arch image
    - name: Push
      if: ${{ inputs.push == true }}
      uses: docker/build-push-action@v3.1.1
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: ${{ inputs.dockerfile }}
