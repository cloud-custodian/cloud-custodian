name: "CI"

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint Check
        run: |
          make lint

  Analyzer:
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Run Bandit
        run: |
          python -m pip install bandit
          make analyzer-bandit
      - name: Run Semgrep
        run: |
          python -m pip install semgrep
          make analyzer-semgrep

  Docs:
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - uses: actions/checkout@v2
      - name: Install poetry
        run: pipx install poetry==1.1.15
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: "poetry"

      - name: Set up doc cache
        uses: actions/cache@v3
        id: sphinx
        with:
          path: |
            docs/build
            docs/source/aws/resources
            docs/source/gcp/resources
            docs/source/azure/resources
            docs/source/awscc/resources
          key: sphinx-docs-${{ runner.os }}-3.9-v2-${{ hashFiles('**/poetry.lock') }}

      - name: Install Deps
        shell: bash
        run: |
          make install-poetry

      - name: Build Docs
        shell: bash
        run: |
          poetry run make sphinx

      - name: Deploy Docs
        if: ${{ github.event_name == 'push' }}
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages
          folder: docs/build/html
          target-folder: docs

  Tests:
    runs-on: "${{ matrix.os }}"
    needs: Lint
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9]
        include:
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: 3.8
          - os: ubuntu-latest
            python-version: 3.7
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Install poetry
        run: pipx install poetry==1.1.15

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          cache: "poetry"
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: |
            **/poetry.lock

      - name: Install Deps
        shell: bash
        run: make install-poetry

      - name: Test
        shell: bash
        env:
          COV_RUN: ${{ contains(matrix.python-version, '3.8') && contains(matrix.os, 'ubuntu') }}
        run: |
          if [[ "$COV_RUN" == "true" ]]
          then
            echo "Running Coverage Test"
            . test.env && poetry run pytest -n auto tests tools \
              --cov c7n --cov tools/c7n_azure/c7n_azure \
              --cov tools/c7n_gcp/c7n_gcp --cov tools/c7n_kube/c7n_kube \
              --cov tools/c7n_mailer/c7n_mailer
            poetry run coverage xml
          else
            . test.env && poetry run pytest -n auto tests tools
          fi

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v3
        if: contains(matrix.python-version, '3.8') && contains(matrix.os, 'ubuntu')
        with:
          files: ./coverage.xml
          name: codecov
          verbose: true

      - name: License Check
        if: contains(matrix.python-version, '3.9') && contains(matrix.os, 'ubuntu')
        run: |
          poetry run python tools/dev/license-check.py
