name: "CI"

on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint Check
        run: |
          make lint

  Analyzer:
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Run Bandit
        run: |
          python -m pip install bandit
          make analyzer-bandit
      - name: Run Semgrep
        run: |
          python -m pip install semgrep
          make analyzer-semgrep

  Tests:
    runs-on: "${{ matrix.os }}"
    needs: Lint
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9]
        include:
          - os: ubuntu-latest
            python-version: 3.6
          - os: ubuntu-latest
            python-version: 3.7
          - os: ubuntu-latest
            python-version: 3.8
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Bootstrap poetry
        shell: bash
        run: |
          curl -sL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py \
            | python - -y --version 1.1.9

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Update PATH
        shell: bash
        run: |
          if [[ "$OSTYPE" == "msys" ]]
          then
            echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
            echo "$PWD\.venv\Scripts" >> $GITHUB_PATH
            echo "VIRTUAL_ENV=$PWD\.venv" >> $GITHUB_ENV
          else
            echo "$HOME/.local/bin" >> $GITHUB_PATH
            echo "$PWD/.venv/bin" >> $GITHUB_PATH
            echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          fi

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version || rm -rf .venv

      - name: Virtualenv
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m venv .venv

      - name: Install Deps
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -U wheel
          make install-poetry

      - name: Test
        shell: bash
        env:
          COV_RUN: contains(matrix.python-version, '3.8') && contains(matrix.os, 'ubuntu')
        run: |
          echo "code cov $COV_RUN"
#          if [[ "$COV_RUN" == "true" ]]
#          then
#           make test-poetry-cov
#         else
          make test-poetry
#          fi

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v2
        if: contains(matrix.python-version, '3.8') && contains(matrix.os, 'ubuntu')
        with:
          files: ./coverage.xml
          name: codecov
          verbose: true

      - name: License Check
        if: contains(matrix.python-version, '3.9') && contains(matrix.os, 'ubuntu')
        run: |
          poetry run python tools/dev/license-check.py
