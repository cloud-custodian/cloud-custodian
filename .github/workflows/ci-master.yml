name: "CI"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint Check
        run: |
          make lint

  Tests:
    runs-on: "${{ matrix.os }}"
    needs: Lint
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        exclude:
          # conserve some osx builders
          - python-version: 3.6
            os: macos-latest
          # conserve some osx builders
          - python-version: 3.9
            os: macos-latest
        include:
          - python-version: 3.9
            os: windows-latest
          - python-version: 3.6
            os: ubuntu-latest
          - python-version: 3.7
            os: ubuntu-latest
          - python-version: 3.8
            os: ubuntu-latest
          - python-version: 3.9
            os: ubuntu-latest
          - python-version: 3.7
            os: macos-latest
          - python-version: 3.8
            os: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Bootstrap poetry
        shell: bash
        run: |
          python -m pip install --upgrade poetry==1.1.8

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install Deps
        run: |
          make install-poetry

      - name: Test
        run: |
          . $(PWD)/test.env && poetry run python -m pytest -n auto -p no:sugar -q tests tools

      - name: License Check
        if: contains(matrix.python-version, '3.9')
        run: |
          poetry run python tools/dev/license-check.py

  Analyzer:
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Run Bandit
        run: |
          python -m pip install bandit
          make analyzer-bandit
      - name: Run Semgrep
        run: |
          python -m pip install semgrep
          make analyzer-semgrep

  Docs:
    # todo, figure out how to fast cache the tox directory here.
    runs-on: ubuntu-latest
    needs: Lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Bootstrap poetry
        shell: bash
        run: |
          python -m pip install --upgrade poetry==1.1.8

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.9-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install Deps
        run: |
          make install-poetry

      - name: Build Docs
        run: |
          poetry run make sphinx
